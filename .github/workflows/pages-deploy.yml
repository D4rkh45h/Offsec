name: Build and Deploy Jekyll site to GitHub Pages

on:
  push:
    branches:
      - main # Asegúrate de que esta es la rama principal de tu repositorio (puede ser 'master')

  # Permite ejecutar este workflow manualmente desde la pestaña Actions
  workflow_dispatch:

jobs:
  jekyll-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          # Es buena idea especificar una versión de Ruby compatible con Jekyll y tu sistema.
          # Por ejemplo, '3.3' o '3.2'. Puedes verificar qué versión usa GitHub Pages.
          ruby-version: '3.3' # O la versión que prefieras y sea compatible, por ejemplo '3.2'
          bundler-cache: true # Instala y cachea las gemas con Bundler

      - name: Install dependencies # Asegura que todas las gemas del Gemfile se instalen
        run: bundle install --gemfile Gemfile

      - name: Build Jekyll site
        # Este es el paso CRUCIAL donde Jekyll procesa tus archivos, incluyendo Liquid,
        # y genera el sitio estático en el directorio '_site'.
        run: bundle exec jekyll build --config _config.yml
        env:
          JEKYLL_ENV: production # Asegura que Jekyll se construya en modo producción

      # Opcional: Ejecutar HTMLProofer. Este paso DEBE ir DESPUÉS de 'Build Jekyll site'.
      # Hemos añadido opciones para ignorar algunos tipos de errores comunes y permitir el despliegue.
      - name: Run HTMLProofer
        run: |
          bundle exec htmlproofer _site \
            --disable-external \
            --allow-hash-href \
            --url-ignore "/Offsec/" \
            --url-ignore "/Offsec/{{.*?}}" \
            --alt-ignore "/profile.png/" # Ignorar alt text si es un problema recurrente, aunque es mejor arreglarlo.
        continue-on-error: true # Permite que el workflow continúe incluso si HTMLProofer encuentra fallos.
                                # Considera quitar esto una vez que todo funcione perfectamente.

      - name: Deploy to GitHub Pages
        # Este paso solo se ejecutará si los anteriores (build y htmlproofer) tuvieron éxito.
        # Usa la acción peaceiris/actions-gh-pages para publicar el contenido de '_site'.
        if: success()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./_site # Indica que el contenido a publicar es el del directorio _site
          # CNAME: your-custom-domain.com # Descomenta y configura si usas un dominio personalizado
          # user_name: 'github-actions[bot]' # Opcional: Define el autor del commit de despliegue
          # user_email: 'github-actions[bot]@users.noreply.github.com' # Opcional